Git init 
Serve para que você crie o seu repositório localmente, no seu computador. Para isso, se você quiser criar um novo repositório, crie uma pasta (ou se você quiser iniciar um repositório em uma pasta que já existe, vá até ela) e digite o comando git init e pronto, seu repositório Git foi criado!

Git add
Quando você cria ou modifica arquivos, você precisa adicionar eles para a área de staging, para isso você usa o comando git add* para adicionar todos os arquivos ou git add<nome-do-arquivo>. Dessa forma, os arquivos estarão prontos para serem commitados.

Git commit
Após você usar o git add, os arquivos vão para a área de commit. Você pode empacotar todas essas alterações em um único commit com uma mensagem que resume aquelas alterações. Para isso você usa o comando git commit-m “Mensagem das alterações”.

Git status
Mostra o status do seu repositório naquele momento. Ele mostra o working directory, a staging area com todos os arquivos em cada uma das áreas e qual o estado de cada um deles. Isso ajuda muito quando precisamos pensar em fazer um commit ou até mesmo verificar quais foram todos os arquivos modificados. 

Git log
Ajuda a saber quais foram os commits feitos no seu repositório, quem fez, quando e também qual a mensagem de cada um. Além disso, esse comando te mostra a hash de cada um dos commits, o que pode ajudar a executar alguns outros comandos também.  

Git reset
Desfaz as alterações de um repositório para um commit anterior. É uma forma bem complexa para desfazer alterações. As duas formas mais usadas:
1.Quando, localmente, precisamos voltar um commit, usamos o comando: git reset <hash do commit que queremos voltar>
2.Para voltar ao estado original que estava no repositório remoto. Importante lembrar que ao rodar esse comando, você perderá o que está localmente! Logo, rodando esse comando, você recuperará o histórico mais recente da branch main do servidor e apagará todas as alterações e commits locais. Para isso, usamos o comando: git reset --hard origin/main

Git revert 
Faz parte de comandos do tipo “desfazer”. Mas ele não é uma opção tão tradicional. Basicamente, ele cria um novo commit desfazendo o commit que você especificar.

Git diff
Verifica as diferenças entre arquivos ou também entre repositórios local e remoto.

Git remote
Liga seu repositório local a um repositório remoto. Para isso, basta usar git remote add origin <servidor>.

Git push
Envia as alterações do repositório local para o repositório remoto.Para isso, use o comando git push origin main, no qual main pode ser substituúida por qualquer outra branch que você estiver trabalhando. 

Git branch
Lista e deleta branches.Para deletar uma branch específica basta rodar git branch -d nome_da_branch.

Git checkout
Cria uma nova branch e restaura arquivos.Para criar uma nova branch: git checkout -b nome_da_branch. E para alternar entre branches: git checkout nome_da_branch.
Obs:Se você tiver feito algo errado e quiser restaurar o arquivo ao seu estado original:git checkout — nome_do_arquivo. Mas, isso só funcionará se o arquivo ainda estiver no working directory. Caso já esteja na área de staging, você terá que, primeiro, fazer um reset para depois conseguir fazer um checkout.

Git merge
Mescla as alterações em sua branch à branch master.

Git pull
Atualiza o repositório local com a versão do repositório remoto.Dessa forma, ele verificará se tem uma versão mais recente e, se tiver, vai baixar as diferenças para o seu computador.  

Git rebase
Move e combina sequências de commits para uma nova branch de uma forma mais linear. Uma das diferenças do rebase para o merge é que o rebase mantém esse histórico do projeto de uma forma mais linear e organizada. O comando é simples, mas todo o conceito de como ele funciona é mais complexo. Para usar: git rebase <branch>.  

Git stash
Serve para guardar ou arquivar as alterações que você fez por um determinado tempo. Ele é bem útil quando você precisa mudar de contexto rápido e ainda não está pronto para fazer um commit, ou também quando você precisa fazer um teste de uma nova linha de pensamento e não quer perder tudo que já fez antes de ter certeza que a nova abordagem funcionará. Para usar: git stash pop.

Git clone
Baixa o código fonte de um repositório.Para clonar um repositório localmente, fazendo uma cópia dele: git clone /caminho/para/o/repositório. Ou para clonar um repositório remoto e para isso usar git clone “url”.
